{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport var storeUserData = function () {\n  var _ref = _asyncToGenerator(function* (username, password, token) {\n    try {\n      yield AsyncStorage.setItem('username', username);\n      yield AsyncStorage.setItem('password', password);\n      yield AsyncStorage.setItem('token', token);\n      yield AsyncStorage.setItem('loginTime', new Date().getTime().toString());\n    } catch (error) {\n      console.log(error);\n    }\n  });\n  return function storeUserData(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getCredentials = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    try {\n      var username = yield AsyncStorage.getItem('username');\n      var password = yield AsyncStorage.getItem('password');\n      var token = yield AsyncStorage.getItem('token');\n      return {\n        username: username,\n        password: password,\n        token: token\n      };\n    } catch (error) {\n      console.log(error);\n      return null;\n    }\n  });\n  return function getCredentials() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var clearUserData = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    try {\n      yield AsyncStorage.removeItem('username');\n      yield AsyncStorage.removeItem('password');\n      yield AsyncStorage.removeItem('token');\n      yield AsyncStorage.removeItem('loginTime');\n    } catch (error) {\n      console.log(error);\n    }\n  });\n  return function clearUserData() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var isUserLoggedFor24Hours = function () {\n  var _ref4 = _asyncToGenerator(function* () {\n    try {\n      var loginTime = yield AsyncStorage.getItem('loginTime');\n      if (!loginTime) {\n        return false;\n      }\n      var currentTime = new Date().getTime();\n      var loginTimeInMillis = parseInt(loginTime);\n      var hoursSinceLogin = (currentTime - loginTimeInMillis) / 1000 / 60 / 60;\n      return hoursSinceLogin >= 24;\n    } catch (error) {\n      console.log(error);\n      return false;\n    }\n  });\n  return function isUserLoggedFor24Hours() {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["AsyncStorage","storeUserData","_ref","_asyncToGenerator","username","password","token","setItem","Date","getTime","toString","error","console","log","_x","_x2","_x3","apply","arguments","getCredentials","_ref2","getItem","clearUserData","_ref3","removeItem","isUserLoggedFor24Hours","_ref4","loginTime","currentTime","loginTimeInMillis","parseInt","hoursSinceLogin"],"sources":["D:/PROGBOYS/ThelmaArmidoro/react/thelma-armidoro-N2/src/services/saveData.js"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n// função para fazer login e salvar os dados da sessão no AsyncStorage\r\nexport const storeUserData = async (username, password, token) => {\r\n  try {\r\n    // salva os dados da sessão no AsyncStorage\r\n    await AsyncStorage.setItem('username', username);\r\n    await AsyncStorage.setItem('password', password);\r\n    await AsyncStorage.setItem('token', token);\r\n    await AsyncStorage.setItem('loginTime', new Date().getTime().toString());\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const getCredentials = async () => {\r\n    try {\r\n      // recupera as credenciais salvas no AsyncStorage\r\n      const username = await AsyncStorage.getItem('username');\r\n      const password = await AsyncStorage.getItem('password');\r\n      const token = await AsyncStorage.getItem('token');\r\n  \r\n      // retorna um objeto com as credenciais\r\n      return { username, password, token };\r\n    } catch (error) {\r\n      console.log(error);\r\n      return null;\r\n    }\r\n  };\r\n\r\nexport const clearUserData = async () => {\r\n    try {\r\n        await AsyncStorage.removeItem('username');\r\n        await AsyncStorage.removeItem('password');\r\n        await AsyncStorage.removeItem('token');\r\n        await AsyncStorage.removeItem('loginTime');\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\n// função para verificar se o usuário está logado há mais de 24 horas\r\nexport const isUserLoggedFor24Hours = async () => {\r\n    try {\r\n      // recupera o horário de entrada salvo no AsyncStorage\r\n      const loginTime = await AsyncStorage.getItem('loginTime');\r\n      if (!loginTime) {\r\n        // usuário nunca logou\r\n        return false;\r\n      }\r\n  \r\n      // calcula a diferença entre o horário atual e o horário de entrada em horas\r\n      const currentTime = new Date().getTime();\r\n      const loginTimeInMillis = parseInt(loginTime);\r\n      const hoursSinceLogin = (currentTime - loginTimeInMillis) / 1000 / 60 / 60;\r\n  \r\n      // verifica se a diferença é maior que 24 horas\r\n      return hoursSinceLogin >= 24;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  /**************************************************************************/\r\n\r\n// exemplo de como chamar a função de login\r\n// loginUser('meuusuario', 'minhasenha', 'meutoken');\r\n\r\n// exemplo de como chamar a função de validação de tempo de login\r\n//   const userLoggedFor24Hours = await isUserLoggedFor24Hours();\r\n//   console.log(userLoggedFor24Hours); // true ou false\r\n\r\n// exemplo de como chamar a função para obter as credenciais\r\n// const credentials = await getCredentials();\r\n// console.log(credentials); // { username: 'meuusuario', password: 'minhasenha', token: 'meutoken' }\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}