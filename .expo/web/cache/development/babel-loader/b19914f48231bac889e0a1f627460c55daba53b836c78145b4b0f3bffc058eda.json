{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport var storeUserData = function () {\n  var _ref = _asyncToGenerator(function* (username, password, token) {\n    var currentTime = new Date().getTime();\n    try {\n      yield AsyncStorage.setItem('username', username);\n      yield AsyncStorage.setItem('password', password);\n      yield AsyncStorage.setItem('token', token);\n      yield AsyncStorage.setItem('loginTime', currentTime.toString());\n      console.log(\"Erro ao salvar credenciais\");\n    } catch (error) {\n      console.log(\"Erro ao salvar credenciais\");\n      console.log(error);\n    }\n    clearUserData();\n  });\n  return function storeUserData(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var getUserData = function () {\n  var _ref2 = _asyncToGenerator(function* () {\n    try {\n      var username = yield AsyncStorage.getItem('username');\n      var password = yield AsyncStorage.getItem('password');\n      var credenciais = {\n        \"login\": username,\n        \"password\": password\n      };\n      console.log(\"login\" + username + \"\\n\" + \"password\" + password + \"\\n\");\n      return credenciais;\n    } catch (error) {\n      console.log(\"erro \" + error);\n    }\n  });\n  return function getUserData() {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var clearUserData = function () {\n  var _ref3 = _asyncToGenerator(function* () {\n    try {\n      yield AsyncStorage.removeItem('username');\n      yield AsyncStorage.removeItem('password');\n      yield AsyncStorage.removeItem('token');\n      yield AsyncStorage.removeItem('loginTime');\n    } catch (error) {\n      console.log(error);\n    }\n  });\n  return function clearUserData() {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var isUserLoggedFor24Hours = function () {\n  var _ref4 = _asyncToGenerator(function* () {\n    try {\n      var loginTime = yield AsyncStorage.getItem('loginTime');\n      if (!loginTime) {\n        return false;\n      }\n      var currentTime = new Date().getTime();\n      var loginTimeInMillis = parseInt(loginTime);\n      var hoursSinceLogin = (currentTime - loginTimeInMillis) / 1000 / 60 / 60;\n      return hoursSinceLogin >= 24;\n    } catch (error) {\n      console.log(error);\n      return false;\n    }\n  });\n  return function isUserLoggedFor24Hours() {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["AsyncStorage","storeUserData","_ref","_asyncToGenerator","username","password","token","currentTime","Date","getTime","setItem","toString","console","log","error","clearUserData","_x","_x2","_x3","apply","arguments","getUserData","_ref2","getItem","credenciais","_ref3","removeItem","isUserLoggedFor24Hours","_ref4","loginTime","loginTimeInMillis","parseInt","hoursSinceLogin"],"sources":["D:/PROGBOYS/ThelmaArmidoro/react/thelma-armidoro-N2/src/services/saveData.js"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\n// armazena o nome de usuário e senha em AsyncStorage\r\nexport const storeUserData = async (username, password, token) => {\r\n    const currentTime = new Date().getTime();\r\n    \r\n    try {\r\n        await AsyncStorage.setItem('username', username);\r\n        await AsyncStorage.setItem('password', password);\r\n        await AsyncStorage.setItem('token', token);\r\n        await AsyncStorage.setItem('loginTime', currentTime.toString());\r\n        console.log(\"Erro ao salvar credenciais\");\r\n    } catch (error) {\r\n        console.log(\"Erro ao salvar credenciais\");\r\n        console.log(error);\r\n    }\r\n\r\n    clearUserData()\r\n};\r\n\r\n// recupera o nome de usuário e senha de AsyncStorage\r\nexport const getUserData = async () => {\r\n    try {\r\n        const username = await AsyncStorage.getItem('username');\r\n        const password = await AsyncStorage.getItem('password');\r\n\r\n            const credenciais = {\r\n                \"login\": username,\r\n                \"password\": password,\r\n\r\n            }\r\n\r\n            console.log(\"login\" +username + \"\\n\" +\r\n                \"password\" + password + \"\\n\")\r\n\r\n            return credenciais\r\n\r\n    } catch (error) {\r\n        console.log(\"erro \" + error);\r\n    }\r\n};\r\n\r\nexport const clearUserData = async () => {\r\n    try {\r\n        await AsyncStorage.removeItem('username');\r\n        await AsyncStorage.removeItem('password');\r\n        await AsyncStorage.removeItem('token');\r\n        await AsyncStorage.removeItem('loginTime');\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nexport const isUserLoggedFor24Hours = async () => {\r\n    try {\r\n      // recupera o horário de entrada salvo no AsyncStorage\r\n      const loginTime = await AsyncStorage.getItem('loginTime');\r\n      if (!loginTime) {\r\n        // usuário nunca logou\r\n        return false;\r\n      }\r\n  \r\n      // calcula a diferença entre o horário atual e o horário de entrada em horas\r\n      const currentTime = new Date().getTime();\r\n      const loginTimeInMillis = parseInt(loginTime);\r\n      const hoursSinceLogin = (currentTime - loginTimeInMillis) / 1000 / 60 / 60;\r\n  \r\n      // verifica se a diferença é maior que 24 horas\r\n      return hoursSinceLogin >= 24;\r\n    } catch (error) {\r\n      console.log(error);\r\n      return false;\r\n    }\r\n  };\r\n\r\n// exemplo de como chamar a função de validação de tempo de login\r\n// const userLoggedFor24Hours = await isUserLoggedFor24Hours();\r\n// console.log(userLoggedFor24Hours); // true ou false"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}